package com.jasonzou.retrofitdemo.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.jasonzou.retrofitdemo.bean.IMConversationState;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "IMCONVERSATION_STATE".
*/
public class IMConversationStateDao extends AbstractDao<IMConversationState, Long> {

    public static final String TABLENAME = "IMCONVERSATION_STATE";

    /**
     * Properties of entity IMConversationState.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property IsTop = new Property(1, boolean.class, "isTop", false, "IS_TOP");
        public final static Property NoDisturb = new Property(2, boolean.class, "noDisturb", false, "NO_DISTURB");
        public final static Property TimeOfSetTop = new Property(3, long.class, "timeOfSetTop", false, "TIME_OF_SET_TOP");
        public final static Property TargetPhone = new Property(4, String.class, "targetPhone", false, "TARGET_PHONE");
    }


    public IMConversationStateDao(DaoConfig config) {
        super(config);
    }
    
    public IMConversationStateDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"IMCONVERSATION_STATE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"IS_TOP\" INTEGER NOT NULL ," + // 1: isTop
                "\"NO_DISTURB\" INTEGER NOT NULL ," + // 2: noDisturb
                "\"TIME_OF_SET_TOP\" INTEGER NOT NULL ," + // 3: timeOfSetTop
                "\"TARGET_PHONE\" TEXT UNIQUE );"); // 4: targetPhone
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"IMCONVERSATION_STATE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, IMConversationState entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getIsTop() ? 1L: 0L);
        stmt.bindLong(3, entity.getNoDisturb() ? 1L: 0L);
        stmt.bindLong(4, entity.getTimeOfSetTop());
 
        String targetPhone = entity.getTargetPhone();
        if (targetPhone != null) {
            stmt.bindString(5, targetPhone);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, IMConversationState entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getIsTop() ? 1L: 0L);
        stmt.bindLong(3, entity.getNoDisturb() ? 1L: 0L);
        stmt.bindLong(4, entity.getTimeOfSetTop());
 
        String targetPhone = entity.getTargetPhone();
        if (targetPhone != null) {
            stmt.bindString(5, targetPhone);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public IMConversationState readEntity(Cursor cursor, int offset) {
        IMConversationState entity = new IMConversationState( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getShort(offset + 1) != 0, // isTop
            cursor.getShort(offset + 2) != 0, // noDisturb
            cursor.getLong(offset + 3), // timeOfSetTop
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // targetPhone
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, IMConversationState entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setIsTop(cursor.getShort(offset + 1) != 0);
        entity.setNoDisturb(cursor.getShort(offset + 2) != 0);
        entity.setTimeOfSetTop(cursor.getLong(offset + 3));
        entity.setTargetPhone(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(IMConversationState entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(IMConversationState entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(IMConversationState entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
